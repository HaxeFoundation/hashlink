parameters:
  name: 'BuildWindows'
  vmImage: ''
  buildSystem: 'cmake' # either 'cmake' or 'vs'
  cmakeGenerator: ''
  cmakeConfig: 'RelWithDebInfo'

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      ${{ if endsWith(parameters.cmakeGenerator, 'Win64') }}:
        ARCH: 64
      ${{ if not(endsWith(parameters.cmakeGenerator, 'Win64')) }}:
        ARCH: 32
    steps:
      - ${{ if eq(parameters.vmImage, 'vs2015-win2012r2') }}:
        - powershell: |
            Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            Write-Host "##vso[task.prependpath]C:\ProgramData\chocolatey\bin"
          displayName: Install Chocolatey
      - powershell: |
          Invoke-WebRequest https://www.libsdl.org/release/SDL2-devel-2.0.5-VC.zip -OutFile SDL.zip
          Expand-Archive SDL.zip -DestinationPath .
          Move-Item SDL2-* include/sdl
          Remove-Item SDL.zip
        displayName: Install sdl
      - powershell: |
          Invoke-WebRequest http://openal-soft.org/openal-binaries/openal-soft-1.17.2-bin.zip -OutFile openal.zip
          Expand-Archive openal.zip -DestinationPath .
          Move-Item openal-* include/openal
          Remove-Item openal.zip
        displayName: Install openal
      - powershell: |
          Invoke-WebRequest https://ffmpeg.zeranoe.com/builds/win$(ARCH)/dev/ffmpeg-3.4.2-win$(ARCH)-dev.zip -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath .
          Move-Item ffmpeg-* include/ffmpeg
          Remove-Item ffmpeg.zip
        displayName: Install ffmpeg
      - powershell: |
          Set-Service wuauserv -StartupType Manual
          choco install --no-progress neko -y
          Write-Host "##vso[task.setvariable variable=NEKOPATH]C:/ProgramData/chocolatey/lib/neko"
        displayName: 'Install Neko'
      - template: install-haxe-snapshot.yml
        parameters:
          platform: windows
      - script: |
          set -ex
          haxelib setup ~/haxelib
          haxelib install hashlink
          haxelib list
        displayName: Install hashlink haxelib
      - ${{ if eq(parameters.buildSystem, 'cmake') }}:
        - script: cmake . -G "${{ parameters.cmakeGenerator }}"
          displayName: CMake
        - script: cmake --build . --config ${{ parameters.cmakeConfig }}
          displayName: Build
        - script: ctest --verbose --build-config ${{ parameters.cmakeConfig }}
          displayName: Test
        - script: cmake --build . --config ${{ parameters.cmakeConfig }} --target PACKAGE
          displayName: Package binaries
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: ${{ parameters.name }}Binaries
            targetPath: bin/hashlink-1.10.0-win$(ARCH).zip
      - ${{ if eq(parameters.buildSystem, 'vs') }}:
        - task: MSBuild@1
          inputs:
            solution: hl.sln
