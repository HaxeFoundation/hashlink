/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// This file is automatically generated by a tool in Hashlink repo.
// see <hashlink_repo>/other/uvgenerator

// Contents of <hashlink_repo>/other/uvgenerator/UV.hx.header :

package hl.uv;

import hl.uv.SockAddr;
import hl.uv.Dns;
import hl.uv.Dir;
import hl.uv.Loop;
import hl.uv.File;

typedef UvUidT = Int;
typedef UvGidT = Int;
typedef UvRunMode = LoopRunMode;
typedef UvFsType = FsRequestType;

abstract UvFile(Int) {}

abstract RefUvUdpSendT(RefUvReqT) to RefUvReqT {}
abstract RefUvWriteT(RefUvReqT) to RefUvReqT {}
abstract RefUvShutdownT(RefUvReqT) to RefUvReqT {}
abstract RefUvRandomT(RefUvReqT) to RefUvReqT {}
abstract RefUvGetnameinfoT(RefUvReqT) to RefUvReqT {}
abstract RefUvGetaddrinfoT(RefUvReqT) to RefUvReqT {}
abstract RefUvFsT(RefUvReqT) to RefUvReqT {}
abstract RefUvConnectT(RefUvReqT) to RefUvReqT {}

abstract RefUvUdpT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvTtyT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvTimerT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvTcpT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvStreamT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvSignalT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvRusageT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvProcessT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvPrepareT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvPipeT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvIdleT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvFsPollT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvFsEventT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvCheckT(RefUvHandleT) to RefUvHandleT {}
abstract RefUvAsyncT(RefUvHandleT) to RefUvHandleT {}

//TODO: implement these
private typedef UInt = Int;
private typedef U64 = I64;

/**
	Automatically generated bindings for libuv.
	Avoid using this module directly.
	BACKWARD COMPATIBILITY OF THIS MODULE IS NOT MAINTAINED.
**/
@:hlNative("uv")
extern class UV {
	extern static public inline function resolve(result:Int):Int {
		if(result < 0)
			throw new UVException(translate_uv_error(result));
		return result;
	}

	extern static public inline function throwErr(result:Int):Int {
		throw new UVException(translate_uv_error(result));
	}

	extern static public inline function checkLoop(loop:Loop):Void {
		if(loop == null)
			throw new UVException(UV_EINVAL);
	}

	extern static public inline function toUTF8(s:String):Bytes {
		return @:privateAccess s.toUtf8();
	}

	extern static public inline function fromUTF8(b:Bytes):String {
		return @:privateAccess String.fromUTF8(b);
	}

	static public function free(ptr:Pointer):Void;
	static public function bytes_to_pointer(bytes:Bytes):Pointer;
	static public function translate_uv_error(uvErrno:Int):UVError;
	static public function translate_to_uv_error(errno:Int):Int;
	static public function handle_to_pointer(data:RefUvHandleT):Pointer;
	static public function handle_set_data_with_gc<T:RefUvHandleT>(handle:RefUvHandleT, data:Handle<T>):Void;
	static public function req_set_data_with_gc<T:RefUvReqT>(req:RefUvReqT, data:Request<T>):Void;
	static public function req_to_pointer(req:RefUvReqT):Pointer;
	static public function alloc_loop():RefUvLoopT;
	static public function loop_to_pointer(req:RefUvLoopT):Pointer;
	static public function alloc_async():RefUvAsyncT;
	static public function alloc_timer():RefUvTimerT;
	static public function alloc_check():RefUvCheckT;
	static public function alloc_getaddrinfo():RefUvGetaddrinfoT;
	static public function alloc_getnameinfo():RefUvGetnameinfoT;
	static public function alloc_addrinfo(flags:Int, family:AddressFamily, socktype:SocketType, protocol:Int):RefCAddrinfo;
	static public function addrinfo_ai_family(ai:RefCAddrinfo):AddressFamily;
	static public function addrinfo_ai_socktype(ai:RefCAddrinfo):SocketType;
	static public function addrinfo_ai_protocol(ai:RefCAddrinfo):Int;
	static public function addrinfo_ai_addr(ai:RefCAddrinfo):SockAddr;
	static public function addrinfo_ai_canonname(ai:RefCAddrinfo):Bytes;
	static public function addrinfo_ai_next(ai:RefCAddrinfo):Null<RefCAddrinfo>;
	static public function nameinfo_flags_to_native(ai:NameInfoFlags):Int;
	static public function alloc_fs():RefUvFsT;
	static public function pointer_to_dir(req:Pointer):RefUvDirT;
	static public function dir_init(dir:RefUvDirT, num_entries:Int):Void;
	static public function dir_nentries(dir:RefUvDirT):Int;
	static public function dir_dirent(dir:RefUvDirT, index:Int):RefUvDirentT;
	static public function dirent_to_pointer(dirent:RefUvDirentT):Pointer;
	static public function dirent_name(dirent:RefUvDirentT):Bytes;
	static public function dirent_type(dirent:RefUvDirentT):DirEntryType;

// Auto generated content :

