/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package hl.uv;

import hl.uv.Request;
import hl.uv.Handle;
import hl.uv.SockAddr;
import hl.uv.Dns;
import hl.uv.Loop;
import hl.uv.File;
import hl.uv.Stream;
import hl.uv.Tty;
import hl.uv.Udp;
import hl.uv.Misc.RandomRequest;

// This file is automatically generated by a tool in Hashlink repo.
// see <hashlink_repo>/other/uvgenerator

// Contents of UV.hx.header

abstract RawAddrInfo(Abstract<"struct_addrinfo">) {}
abstract RawDirent(Abstract<"uv_dirent">) {}
abstract RawStat(Abstract<"uv_stat">) {}
abstract RawStatFs(Abstract<"uv_statfs">) {}
abstract RawRUsage(Abstract<"uv_rusage">) {}
abstract RawCpuInfo(Abstract<"uv_cpuinfo">) {}
abstract RawInterfaceAddress(Abstract<"uv_interface_address">) {}
abstract RawSockAddrIn(Abstract<"struct_sockaddr_in">) {}
abstract RawSockAddrIn6(Abstract<"struct_sockaddr_in6">) {}
abstract RawPasswd(Abstract<"uv_passwd">) {}
abstract RawUtsName(Abstract<"uv_utsname">) {}
abstract RawTimeVal(Abstract<"uv_timeval">) {}
abstract RawTimeVal64(Abstract<"uv_timeval64">) {}
abstract RawProcessOptions(Abstract<"uv_process_options">) {}

//TODO: implement these
private typedef UInt = Int;
private typedef U64 = I64;

/**
	Automatically generated bindings for libuv.
	Avoid using this module directly.
	BACKWARD COMPATIBILITY OF THIS MODULE IS NOT MAINTAINED.
**/
@:hlNative("uv")
extern class UV {
	extern static public inline function resolve(result:Int):Int {
		if(result < 0)
			throw new UVException(translate_uv_error(result));
		return result;
	}

	extern static public inline function toUTF8(s:String):Bytes {
		return @:privateAccess s.toUtf8();
	}

	static public function free(ptr:Pointer):Void;
	static public function bytes_to_pointer(bytes:Bytes):Pointer;
	static public function translate_uv_error(uvErrno:Int):UVError;
	static public function translate_to_uv_error(errno:Int):Int;
	static public function handle_data_of_pointer(ptr:Pointer):HandleData;
	static public function handle_data_to_pointer(data:HandleData):Pointer;
	static public function handle_to_pointer(data:Handle):Pointer;
	static public function handle_set_data_with_gc(handle:Handle, data:HandleData):Void;
	static public function req_data_of_pointer(ptr:Pointer):RequestData;
	static public function req_data_to_pointer(data:RequestData):Pointer;
	static public function req_set_data_with_gc(req:Request, data:RequestData):Void;
	static public function req_to_pointer(req:Request):Pointer;
	static public function alloc_loop():Loop;
	static public function alloc_async():Async;
	static public function alloc_timer():Timer;
	static public function alloc_check():Check;
	static public function alloc_getaddrinfo():AddrInfoRequest;
	static public function alloc_getnameinfo():NameInfoRequest;
	static public function alloc_addrinfo(flags:Int, family:AddressFamily, socktype:SocketType, protocol:Int):RawAddrInfo;
	static public function addrinfo_ai_family(ai:RawAddrInfo):AddressFamily;
	static public function addrinfo_ai_socktype(ai:RawAddrInfo):SocketType;
	static public function addrinfo_ai_protocol(ai:RawAddrInfo):Int;
	static public function addrinfo_ai_addr(ai:RawAddrInfo):SockAddr;
	static public function addrinfo_ai_canonname(ai:RawAddrInfo):Bytes;
	static public function addrinfo_ai_next(ai:RawAddrInfo):Null<RawAddrInfo>;
	static public function nameinfo_flags_to_native(ai:NameInfoFlags):Int;
	static public function alloc_fs():FsRequest;
	static public function pointer_to_dir(req:Pointer):Dir;

// Auto generated

