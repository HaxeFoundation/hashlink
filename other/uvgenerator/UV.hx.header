/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package hl.uv;

import hl.uv.SockAddr;
import hl.uv.Dns;

// This file is automatically generated by a tool in Hashlink repo.
// see <hashlink_repo>/other/uvgenerator

// Contents of UV.hx.header

private abstract Addrinfo(Abstract<"struct_addrinfo">) {}

typedef RawAddrInfo = Addrinfo;

private typedef UInt = Int;
private typedef U64 = I64;
private typedef UvRunMode = Loop.LoopRunMode;
private typedef Sockaddr = SockAddr;
private typedef Getaddrinfo = AddrInfoRequest;
private typedef Getnameinfo = NameInfoRequest;

/**
	Automatically generated bindings for libuv.
	Avoid using this module directly.
	BACKWARD COMPATIBILITY OF THIS MODULE IS NOT MAINTAINED.
**/
@:hlNative("uv")
extern class UV {
	extern static public inline function resolve(result:Int):Int {
		if(result < 0)
			throw new UVException(translate_uv_error(result));
		return result;
	}

	static public function free(v:Dynamic):Void;
	static public function translate_uv_error(uvErrno:Int):UVError;
	static public function translate_to_uv_error(errno:Int):Int;
	static public function handle_data_of_pointer(ptr:Pointer):HandleData;
	static public function handle_data_to_pointer(data:HandleData):Pointer;
	static public function handle_set_data_with_gc(handle:Handle, data:HandleData):Void;
	static public function req_data_of_pointer(ptr:Pointer):ReqData;
	static public function req_data_to_pointer(data:ReqData):Pointer;
	static public function req_set_data_with_gc(handle:Req, data:ReqData):Void;
	static public function alloc_loop():Loop;
	static public function alloc_async():Async;
	static public function alloc_timer():Timer;
	static public function alloc_check():Check;
	static public function alloc_getaddrinfo():Getaddrinfo;
	static public function alloc_getnameinfo():Getnameinfo;
	static public function alloc_addrinfo(flags:Int, family:AddressFamily, socktype:SocketType, protocol:Int):Addrinfo;
	static public function addrinfo_family(ai:Addrinfo):AddressFamily;
	static public function addrinfo_socktype(ai:Addrinfo):SocketType;
	static public function addrinfo_protocol(ai:Addrinfo):Int;
	static public function addrinfo_addr(ai:Addrinfo):SockAddr;
	static public function addrinfo_canonname(ai:Addrinfo):Bytes;
	static public function addrinfo_next(ai:Addrinfo):Null<Addrinfo>;
	static public function nameinfo_flags_to_native(ai:NameInfoFlags):Int;

// Auto generated

